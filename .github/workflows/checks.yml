name: Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:

env:
  platform: ${{ 'iOS Simulator' }}
  device: ${{ 'iPhone 12' }}
  commit_sha: ${{ github.sha }}

jobs:
  build:
    name: Build
    runs-on: macos-latest
    env:
      scheme: ${{ 'Readium-Package' }}
      DEVELOPER_DIR: /Applications/Xcode_12.4.app/Contents/Developer

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: brew install xcodegen
      - name: Check Carthage project
        run: |
          # Check that the Carthage project is up to date.
          make carthage-project
          git diff --exit-code --name-only Support/Carthage/Readium.xcodeproj
      - name: Build
        run: |
          xcodebuild build-for-testing -scheme "$scheme" -destination "platform=$platform,name=$device"
      - name: Test
        run: |
          xcodebuild test-without-building -scheme "$scheme" -destination "platform=$platform,name=$device"

  lint:
    name: Lint
    runs-on: macos-latest
    env:
      scripts: ${{ 'Sources/Navigator/EPUB/Scripts' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: yarn --cwd "$scripts" install --frozen-lockfile
      - name: Lint JavaScript
        run: yarn --cwd "$scripts" run lint
      - name: Check JavaScript formatting
        run: yarn --cwd "$scripts" run checkformat
      - name: Check if bundled scripts are up-to-date
        run: |
            make scripts
            git diff --exit-code --name-only Sources/Navigator/EPUB/Assets/Static/scripts/*.js

  int-dev:
    name: Integration (Local)
    runs-on: macos-latest
    defaults:
      run:
        working-directory: TestApp
    environment: LCP
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: brew install xcodegen
      - name: Generate project
        run: make dev lcp=${{ secrets.LCP_URL_SPM }}
      - name: Build
        run: |
          xcodebuild build -scheme TestApp -destination "platform=$platform,name=$device"

  # The following integration jobs are run only when pushing to `develop` or `main`.
  # As they use a specific commit hash, they can't run properly from a pull request
  # opened from forks.

  int-spm:
    name: Integration (Swift Package Manager)
    if: github.event_name == 'push'
    runs-on: macos-latest
    defaults:
      run:
        working-directory: TestApp
    environment: LCP
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: brew install xcodegen
      - name: Generate project
        run: make spm lcp=${{ secrets.LCP_URL_SPM }} commit=$commit_sha
      - name: Build
        run: |
          xcodebuild build -scheme TestApp -destination "platform=$platform,name=$device"

  int-carthage:
    name: Integration (Carthage)
    if: github.event_name == 'push'
    runs-on: macos-latest
    defaults:
      run:
        working-directory: TestApp
    environment: LCP
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: brew install xcodegen
      - name: Generate project
        run: make carthage lcp=${{ secrets.LCP_URL_CARTHAGE }} commit=$commit_sha
      - name: Build
        run: |
          xcodebuild build -scheme TestApp -destination "platform=$platform,name=$device"

  # Warning: This job cannot actually test the state of the current commit,
  # but will check that the latest branch/tag set in the Podspecs are valid.
  int-cocoapods:
    name: Integration (CocoaPods)
    if: github.event_name == 'push'
    runs-on: macos-latest
    defaults:
      run:
        working-directory: TestApp
    environment: LCP
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: brew install xcodegen
      - name: Generate project
        run: make cocoapods lcp=${{ secrets.LCP_URL_COCOAPODS }} commit=$commit_sha
      - name: Build
        run: |
          xcodebuild build -workspace TestApp.xcworkspace -scheme TestApp -destination "platform=$platform,name=$device"
